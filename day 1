code (1 to 6)


Set Matrix Zeros   Program 1:


#include <bits/stdc++.h> 
vector<vector<int>> zeroMatrix(vector<vector<int>> &matrix, int n, int m) {
	// Write your code here.
int col[m] = {0};

int row[n] = {0};

 

for(int i = 0; i< n; i++){

for(int j = 0 ; j< m ; j++){

if(matrix[i][j] == 0){

row[i] = 1;

col[j] = 1;

}

}

}

 

for(int i = 0; i< n; i++){

for(int j = 0; j< m; j++){

if(row[i] || col[j]){

matrix[i][j] = 0;

}

}

}

return matrix;
}




Pascal's Triangle  Problem 2:


vector<vector<int>> pascalTriangle(int N) {

    // Write your code here.

    vector<vector<int>> ans;

    vector<int> t1;

    t1.push_back(1);

    ans.push_back(t1);

    if(N==1)

    return ans;

    vector<int> t2;

    t2.push_back(1);

    t2.push_back(1);

    ans.push_back(t2);

    if(N==2)

    return ans;

    for(int i=2;i<N;i++)

    {

        vector<int> temp(i);

        for(int j=0;j<i;j++)

        temp[j]=ans[i-1][j]+ans[i-1][j-1];

        temp.push_back(1);

        ans.push_back(temp);

    }

 

    return ans;

}


Next Permutation   Problem 3:


vector<int> nextGreaterPermutation(vector<int> &A) {

    int k, l, n = A.size();

 

    for(k = n-2; k>=0; k--){

        if(A[k] < A[k+1])

            break;

    }

 

    if(k < 0){

        reverse(A.begin(), A.end());

    }

    else{

        for(l = n-1; l>k; l--){

            if(A[l] > A[k])

                break;

        }

        swap(A[k], A[l]);

        reverse(A.begin() + k + 1, A.end());

    }

    return A;

}

Kadane's Algorithm  :

#include <bits/stdc++.h> 
long long maxSubarraySum(int arr[], int n)
{
   long long currSum = 0;
   long long maxSum = INT_MIN;

   for(int i = 0; i < n ; i++){
       currSum = currSum + arr[i];
       if(currSum < 0){
           currSum = 0;
       }
       maxSum = max(maxSum, currSum);
   }
   return maxSum;
}




Sort an array of 0's, 1's and 2's :



#include <bits/stdc++.h> 

void sort012(int *arr, int n)

{

   int count_0=0, count_1=0, count_2=0;

   for(int i=0;i<n;i++){

      if(arr[i]==0){

         count_0++;

      }

      else if(arr[i]==1){

         count_1++;

      }

      else

      count_2++;

   }

   for(int i=0;i<count_0;i++){

      arr[i]=0;

   }

   for(int i=count_0;i<count_0+count_1;i++){

      arr[i]=1;

   }

   for(int i=count_0+count_1;i<n;i++){

      arr[i]=2;

   }

   //   Write your code here

}



Stock Buy and Sell :


int bestTimeToBuyAndSellStock(vector<int>&prices) {

    // Write your code here.

    int n = prices.size();

    int profit=0;

    int buy = prices[0];

 

    for(int i=1;i<n;i++)

    {

        int diff = prices[i]-buy;

        profit = max(profit,diff);

 

        buy = min(buy,prices[i]);

    }

    return profit;

}

